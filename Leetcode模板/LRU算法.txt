# LRU算法与哈希链表的实现

## 哈希表的特点：

​	查找速度快，但是数据无序。

一个将无序变有序的方法的方法就是：使用两个Hash Map，将元素与index进行关联，一个是<String,Integer>  另一个是<Integer,String>  可以正反找到需要的String，就实现了hash表中加入元素有序性。

## 链表的特点：

​	查找速度慢，是O（N），添加速度快O（1）。

（使用双向链表，可以使得删除时间复杂度达到 O(1)，在普通链表中，由于删除节点需要找到该元素的前一个节点，所以这个查找时间复杂度就是O（N），双向链表就可以随时找到特定节点的父节点，实现O（1））

## 使用哈希与链表结合，--> 哈希链表LinkedHashMap

（key就是哈希表与链表的通信中介） 这两者可以通过**双向通信。**

![image-20200601231201516](C:\Users\诚实的狮子\AppData\Roaming\Typora\typora-user-images\image-20200601231201516.png)



## LRU算法是什么？

LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。

- 最常见的实现是使用一个链表保存缓存数据，详细算法实现如下

![img](https:////upload-images.jianshu.io/upload_images/5682416-3a5d7333c349fd44.png?imageMogr2/auto-orient/strip|imageView2/2/w/429/format/webp)

1. 新数据插入到链表头部；
2. 每当缓存命中（即缓存数据被访问），则将数据移到链表头部；
3. 当链表满的时候，将链表尾部的数据丢弃。
    【命中率】
    当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重。
    【复杂度】
    实现简单。
    【代价】
    命中时需要遍历链表，找到命中的数据块索引，然后需要将数据移到头部。



作者：jiangmo
链接：https://www.jianshu.com/p/d533d8a66795
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



```java
class DoubleList {  
    private Node head, tail; // 头尾虚节点
    private int size; // 链表元素数

    public DoubleList() {
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head.next = tail;
        tail.prev = head;
        size = 0;
    }

    // 在链表头部添加节点 x
    public void addFirst(Node x) {
        x.next = head.next;
        x.prev = head;
        head.next.prev = x;
        head.next = x;
        size++;
    }

    // 删除链表中的 x 节点（x 一定存在）
    // 双向链表的删除操作 复杂度 O（1）
    public void remove(Node x) {
        x.prev.next = x.next;
        x.next.prev = x.prev;
        size--;
    }
    
    // 删除链表中最后一个节点，并返回该节点
    public Node removeLast() {
        if (tail.prev == head)
            return null;
        Node last = tail.prev;
        remove(last);
        return last;
    }
    
    // 返回链表长度
    public int size() { return size; }
}

```

```java
class LRUCache {
    // key -> Node(key, val)
    private HashMap<Integer, Node> map;
    // Node(k1, v1) <-> Node(k2, v2)...
    private DoubleList cache;
    // 最大容量
    private int cap;
    
    public LRUCache(int capacity) {
        this.cap = capacity;
        map = new HashMap<>();
        cache = new DoubleList();
    }
    
    public int get(int key) {
        if (!map.containsKey(key))
            return -1;
        int val = map.get(key).val;
        // 利用 put 方法把该数据提前
        put(key, val);
        return val;
    }
    
    public void put(int key, int val) {
        // 先把新节点 x 做出来
        Node x = new Node(key, val);
        
        if (map.containsKey(key)) {
            // 删除旧的节点，新的插到头部
            cache.remove(map.get(key));
            //添加到头部
            cache.addFirst(x);
            // 更新 map 中对应的数据
            map.put(key, x);
        } else {
            if (cap == cache.size()) {
                // 删除链表最后一个数据
                Node last = cache.removeLast();
                map.remove(last.key);
            }
            // 直接添加到头部
            cache.addFirst(x);
            map.put(key, x);
        }
    }
}

```

```java
 // 删除链表最后一个数据
                Node last = cache.removeLast();
                map.remove(last.key);
```

这个删除操作就是由链表得到node，从而得到key，从而可以通过map操作map中的条目。（key就是哈希表与链表的通信中介）