# 不同的二叉搜素树



给定一个整数 n，生成所有由 1 ... n 为节点所组成的 二叉搜索树 。

 

示例：

输入：3
输出：
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释：
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

## 递归

### 思路：

1. 使用递归，求出左子树的所有可能情况列表，右子树的所欲可能情况列表，然后对左右子树进行嵌套遍历--> 组合.
2. 最小子结构 -- > TreeNode为null 的情况，可以使逻辑简单，代码简洁。

### 注意事项：

1. 在递归过程中，需要注意一定要把这个二叉树构建出来。而不是想着如何输出这个二叉树列表。
2. 在左子树为空的 时候，左子树得到的集合必须是null，可以进行遍历，如果给左边结合置为空的时候，右边就不会遍历，导致bug

### 代码：

```java
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n <= 0){
            return Collections.emptyList();
        }
        return listTrees(1,n);
        
    }

    public List<TreeNode> listTrees(int begin,int end){

        List<TreeNode> result = new ArrayList<TreeNode>();

        if(begin > end) {
            // 这里当没有节点的时候，需要添加一个null
            result.add(null);
            return result;
        }
        if(begin == end ) {
           
            result.add(new TreeNode(begin));
            return result;

        }

        for( int i=begin;i<=end;i++){
            List<TreeNode> leftList =  listTrees(begin,i-1);
            List<TreeNode> rightList = listTrees(i+1,end);

            // 这里对左右遍历，当左边没有节点的时候，需要给左边置为null（不可以为空，不然右边部分无法遍历），右边依次遍历。
            for(TreeNode tempnode1 : leftList){
                for(TreeNode tempnode2 : rightList){
                    /**
                     构建这个二叉树
                    */
                    TreeNode thisNode = new TreeNode(i);
                    thisNode.left = tempnode1;
                    thisNode.right = tempnode2;
                    result.add(thisNode);
                }
            }
        }
        return result;

    }
}
```

###  



## 动态规划

### 思路：

1. 这里dp[ n ]代表从 1 到 n的数字组成的list<TreeNode>
2. 从 1 到 n 中依次以每一个节点为头结点，然后左边节点排列成二叉搜索树，右边节点叶排列成二叉搜索树。（左右树的节点的数字都是连续的<-- 二叉搜索树的性质）
3. 状态转移方程： dp[ n ] = for( leftList) $ for( rightList )
4. 这里的状态转移中，右子树还需要进行树的重建--> 在遍历右子树的时候，将右子树的每一个节点都增加一个offset



### 注意事项：

1. 这里的结果是一个 List<TreeNode> ，这里需要将这个二叉树构建出来，然后再将root 节点加入到list中去。
2. dp[ 0 ].add ( null ) 是必须的。0个节点虽然没有二叉搜索树列表，但是在遍历过程中，0个节点也默认是二叉搜索树，需要设置为null ,因为需要构建二叉搜索树，当做左子树节点个数为 0 个时，就需要将 node.left == null，右边也一样。



### 代码：

```java
class Solution {
    public List<TreeNode> generateTrees(int n) {

        // 这里的构造方式有点特别
        ArrayList<TreeNode>[] dp = new ArrayList[n+1];
        dp[0] = new ArrayList<TreeNode>();
        if(n == 0) return dp[0];

        dp[0].add(null);

        int end = n;
        // 动态规划，自底向上。
        for( int len=1;len <=end ;len ++){
            dp[len] = new ArrayList<TreeNode>();
            // 将不同的数字作为根节点，只需要考虑到len
            for(int root =1;root<=len;root++){
                int left = root-1;
                int right = len - root;
                for(TreeNode leftNode : dp[left]){
                    for(TreeNode rightNode : dp[right]){
                        TreeNode thisNode = new TreeNode(root);
                        thisNode.left = leftNode; // 左边不需要复制，因为左边就是从
                        thisNode.right = clone(rightNode,root);
                        // 此时thisNode 已经做好，直接加入到dp数组中
                        dp[len].add(thisNode);
                    }
                }
            }
        }
        return dp[n];
        
    }

    public TreeNode clone(TreeNode node,int offset){
        // 这里要对这个树中的每一个节点都要添加偏移量，因此简单的改变node根本不行，
        // 需要使用递归，遍历每一个节点（不能修改节点，因为这个节点还在其他的dp【】中还在使用）
        // 需要创造出新的节点
        if(node == null) return null;

        TreeNode newNode = new TreeNode(node.val + offset);
        newNode.left = clone(node.left,offset);
        newNode.right = clone(node.right,offset);

        return newNode;


    }
}
```

