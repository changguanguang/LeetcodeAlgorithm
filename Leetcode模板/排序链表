# 排序链表

在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

示例 1:

输入: 4->2->1->3
输出: 1->2->3->4
示例 2:

输入: -1->5->3->4->0
输出: -1->0->3->4->5

## 归并（递归）

- 题目要求 O(n log n) 时间复杂度，想到二分法，自然想到归并排序

- 对数组进行归并排序的空间复杂度为*O*(*n*)，分别由新开辟的数组O(n)，和递归调用*O*(*l**o**g**n*)组成，而根据链表特性：

  - 数组额外空间：链表可以通过修改引用来更改节点顺序，无需像数组一样开辟额外空间
  - 递归额外空间：递归函数将带来O(logn)的空间复杂度

- 通过递归实现链表归并排序，有以下两个环节：

  - 分割cut环节：
    - 快慢指针寻找中点 midNode
    - midNode.next = null 分割链表
    - 递归排序分割链表
  - 合并merge环节：
    - 双指针合并法，建立辅助ListNode h 作为头部

  ```java
  class Solution {
      public ListNode sortList(ListNode head) {
          if(head == null || head.next == null) return head;
  
          ListNode slow = head;
          ListNode fast = head.next;
  
          // 快慢指针
          while(fast != null && fast.next != null){
              slow = slow.next;
              fast = fast.next.next;
          
          }
          ListNode rightHead = slow.next;
          slow.next = null; // 将两链表分割
  
          ListNode leftNode =  sortList(head);
          ListNode rightNode =  sortList(rightHead);
  
          // merge两链表
          ListNode res = merge(leftNode,rightNode);
  
          return res;
      }
  
      // 合并两链表
      public ListNode merge(ListNode leftNode,ListNode rightNode){
          
          // 小技巧： 使用一个辅助结点作为新链表的头结点，可以避免许多复杂操作
          // 如果不使用头结点，那么就需要在刚开始遍历的时候判断新的头结点是哪个，以及后续操作繁琐
          ListNode h = new ListNode(0);
          ListNode res = h; // 备份当前头结点
          while(leftNode != null && rightNode != null){
              
              if(leftNode.val < rightNode.val){
                  h.next = leftNode;
                  leftNode = leftNode.next;
              }else{
                  h.next = rightNode ;
                  rightNode = rightNode.next;
              }
              h = h.next;
          }
          h.next = leftNode!=null? leftNode:rightNode;
  
          return res.next;
      }
  }
  ```

  

## 归并（迭代） --> 从底向上