/**
	滑动窗口实例-->最长子字符串
	

	输入: "abcabcbb"
	输出: 3 
	解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
*/

思路
标签：滑动窗口
暴力解法时间复杂度较高，会达到 O(n^2)O(n 2 )，故而采取滑动窗口的方法降低时间复杂度
定义一个 map 数据结构存储 (k, v)，其中 key 值为字符，value 值为字符位置 +1，加 1 表示从字符位置后一个才开始不重复
我们定义不重复子串的开始位置为 start，结束位置为 end
随着 end 不断遍历向后，会遇到与 [start, end] 区间内字符相同的情况，此时将字符作为 key 值，获取其 value 值，并更新 start，此时 [start, end] 区间内不存在重复字符
无论是否更新 start，都会更新其 map 数据结构和结果 ans。
时间复杂度：O(n)O(n)

作者：guanpengchn
链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-jie-suan-fa-3-wu-zhong-fu-zi-fu-de-zui-chang-z/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。



 这里的 Map 中存放的每个字符的最新的位置，

思路：

1. 使用滑动窗口，使用Map存放每个字符的最新位置，在遇见一个重复的字符的时候，那么滑动窗口就会跳动到这个最近的位置，就是map中记录的位置。
2. 再更新ans，将这个字符加入到map中去

```java
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(),ans = 0;
        Map<Character,Integer> map = new HashMap<>();
        //对end进行遍历，在这之中更改start的值。每次更新ans的值
        for(int end = 0,start  = 0;end < n ; end++){
            char alpha = s.charAt(end);
            if(map.containsKey(alpha)){
                //更新start
                //取max的原因：有可能所包含的char位于start前面，
                //防止start倒退，那么就比较一下
                satrt = Math.max(start,map[alpha]);
            }
            //更新alpha的位置---》保证alpha总是最新的alpha
            //每次更新map，就可以使得map中的值总是最新的，
            //保证字符不重复的最为根本的操作
            map.put(alpha,end+1);
            //更新ans的值
            ans = Math.max(ans,end-start+1);
        }
        return ans;
	}
}
```